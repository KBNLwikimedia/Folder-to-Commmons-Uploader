@echo off
REM ------------------------------------------------------------
REM Folder-to-Commons-Uploader (Windows launcher v2)
REM - Creates/activates .venv
REM - Upgrades pip, installs requirements
REM - Ensures data store
REM - Starts monitor.py (new window), then app.py (this window)
REM ------------------------------------------------------------

setlocal
cd /d "%~dp0"

REM --- Pick a Python launcher (py -3 preferred, else python) ---
set "PYLAUNCHER="
where py >nul 2>nul && set "PYLAUNCHER=py -3"
if not defined PYLAUNCHER (
  where python >nul 2>nul && set "PYLAUNCHER=python"
)
if not defined PYLAUNCHER (
  echo [ERROR] No Python found on PATH. Install Python 3.x or add it to PATH.
  exit /b 1
)

REM --- Create venv if missing ---
if not exist ".venv\Scripts\python.exe" (
  echo Creating virtual environment: .venv
  %PYLAUNCHER% -m venv .venv
  if errorlevel 1 goto :venv_fail
)

REM --- Activate venv ---
call ".venv\Scripts\activate"
if errorlevel 1 goto :activate_fail

REM --- Use writable local temp/cache to avoid "Access is denied" ---
set "PIP_DISABLE_PIP_VERSION_CHECK=1"
set "TMP=%CD%\_tmp"
set "TEMP=%CD%\_tmp"
set "PIP_CACHE_DIR=%CD%\.pip-cache"
if not exist "%TMP%" mkdir "%TMP%"
if not exist "%PIP_CACHE_DIR%" mkdir "%PIP_CACHE_DIR%"

echo Upgrading pip...
python -m pip install --upgrade pip

REM --- Install dependencies (if any) ---
if exist requirements.txt goto :install_deps
goto :after_install

:install_deps
echo Installing dependencies from requirements.txt ...
python -m pip install -r requirements.txt --no-warn-script-location
if errorlevel 1 (
  echo First attempt failed; retrying with --no-cache-dir ...
  python -m pip install -r requirements.txt --no-warn-script-location --no-cache-dir
  if errorlevel 1 goto :pip_fail
)
goto :after_install

:after_install
REM --- Ensure data store exists ---
if not exist "data" mkdir "data"
if not exist "data\processed_files.json" echo {}> "data\processed_files.json"

REM --- Start monitor.py in a new window (background) ---
echo Starting monitor.py ...
start "" "%CD%\.venv\Scripts\python.exe" monitor.py

REM --- Small pause so monitor initializes ---
timeout /t 3 /nobreak >nul

REM --- Start Flask app (blocks here) ---
echo Starting Flask app...
python app.py
goto :eof


REM ---------- Error handlers ----------
:venv_fail
echo [ERROR] Failed to create .venv
exit /b 1

:activate_fail
echo [ERROR] Failed to activate .venv
exit /b 1

:pip_fail
echo [ERROR] pip install failed. If you see "Access is denied":
echo   - Ensure this repo is in a writable folder (not protected by Controlled Folder Access)
echo   - Allow ^".venv\Scripts\python.exe^" in Windows Security if needed
echo   - Unblock downloaded files (Properties -> Unblock) if from a ZIP
exit /b 1
